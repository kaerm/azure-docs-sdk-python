### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.core.tracing.common.get_function_and_class_name
  - azure.core.tracing.common.get_parent_span
  - azure.core.tracing.common.set_span_contexts
  fullName: azure.core.tracing.common
  langs:
  - python
  module: azure.core.tracing.common
  name: common
  summary: Common functions shared by both the sync and the async decorators.
  type: module
  uid: azure.core.tracing.common
- fullName: azure.core.tracing.common.get_function_and_class_name
  langs:
  - python
  module: azure.core.tracing.common
  name: get_function_and_class_name(func, *args)
  summary: 'Given a function and its unamed arguments, returns class_name.function_name.
    It assumes the first argument

    is *self*. If there are no arguments then it only returns the function name.'
  syntax:
    content: get_function_and_class_name(func, *args)
    parameters:
    - description: the function passed in
      id: func
      type:
      - collections.abc.Callable
    - description: List of arguments passed into the function
      id: args
      type:
      - List[Any]
  type: function
  uid: azure.core.tracing.common.get_function_and_class_name
- fullName: azure.core.tracing.common.get_parent_span
  langs:
  - python
  module: azure.core.tracing.common
  name: get_parent_span(parent_span)
  summary: 'Returns the current span so that the function''s span will be its child.
    It will create a new span if there is

    no current span in any of the context.'
  syntax:
    content: get_parent_span(parent_span)
    parameters:
    - description: The parent_span arg that the user passes into the top level function
      id: parent_span
    return:
      description: the parent_span of the function to be traced
      type:
      - '*azure.core.tracing.abstract_span.AbstractSpan*'
  type: function
  uid: azure.core.tracing.common.get_parent_span
- fullName: azure.core.tracing.common.set_span_contexts
  langs:
  - python
  module: azure.core.tracing.common
  name: set_span_contexts(wrapped_span, span_instance=None)
  summary: 'Set the sdk context and the implementation context. *span_instance* will
    be used to set the implementation context

    if passed in else will use *wrapped_span.span_instance*.'
  syntax:
    content: set_span_contexts(wrapped_span, span_instance=None)
    parameters:
    - description: The *AbstractSpan* to set as the sdk context
      id: wrapped_span
      type:
      - azure.core.tracing.abstract_span.AbstractSpan
    - defaultValue: None
      description: The span to set as the current span for the implementation context
      id: span_instance
  type: function
  uid: azure.core.tracing.common.set_span_contexts
references:
- fullName: azure.core.tracing.common.get_function_and_class_name
  isExternal: false
  name: get_function_and_class_name(func, *args)
  parent: azure.core.tracing.common
  uid: azure.core.tracing.common.get_function_and_class_name
- fullName: azure.core.tracing.common.get_parent_span
  isExternal: false
  name: get_parent_span(parent_span)
  parent: azure.core.tracing.common
  uid: azure.core.tracing.common.get_parent_span
- fullName: azure.core.tracing.common.set_span_contexts
  isExternal: false
  name: set_span_contexts(wrapped_span, span_instance=None)
  parent: azure.core.tracing.common
  uid: azure.core.tracing.common.set_span_contexts
- fullName: List[Any]
  name: List[Any]
  spec.python:
  - fullName: List
    name: List
    uid: List
  - fullName: '['
    name: '['
  - fullName: Any
    name: Any
    uid: Any
  - fullName: ']'
    name: ']'
  uid: List[Any]
